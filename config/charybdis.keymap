#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        hm_l: hm_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <275>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <13 14 15 16>;
        };

        hm_r: hm_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <275>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <19 20 21 22>;
        };

        as_k: as_k {
            compatible = "zmk,behavior-hold-tap";
            label = "AS_K";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
        };

        tap_mod_k: tap_mod_k {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_MOD_K";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <37>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
&kp TAB    &kp Q         &kp W         &kp E                &kp R               &kp T    &kp Y               &kp U                   &kp I                  &kp O                      &kp P                 &kp DELETE
&kp LCTRL  &hm_l LGUI A  &hm_l LALT S  &hm_l LCTRL D        &hm_l LEFT_SHIFT F  &kp G    &kp H               &hm_r RIGHT_SHIFT J     &hm_r RCTRL K          &hm_r RALT L               &hm_r RGUI SEMICOLON  &as_k DOUBLE_QUOTES SINGLE_QUOTE
&kp LSHFT  &kp Z         &kp X         &kp C                &kp V               &kp B    &kp N               &kp M                   &as_k LESS_THAN COMMA  &as_k GREATER_THAN PERIOD  &as_k QUESTION SLASH  &kp RSHIFT
                                       &tap_mod_k 4 ESCAPE  &tap_mod_k 3 SPACE  &mo 5    &tap_mod_k 2 ENTER  &tap_mod_k 1 BACKSPACE
            >;
        };

        nums {
            bindings = <
&trans  &kp LEFT_BRACKET  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp RIGHT_BRACKET    &trans  &trans      &trans     &trans    &trans    &trans
&trans  &kp MINUS         &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp EQUAL            &trans  &kp LSHIFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp GRAVE         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp BACKSLASH        &trans  &trans      &trans     &trans    &trans    &trans
                                        &kp PERIOD    &kp NUMBER_0  &trans               &trans  &trans
            >;
        };

        syms {
            bindings = <
&trans  &kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK          &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE    &trans  &trans      &trans     &trans    &trans    &trans
&trans  &kp UNDERSCORE  &kp DOLLAR       &kp PERCENT           &kp CARET              &kp PLUS           &trans  &kp LSHIFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp TILDE       &kp EXCLAMATION  &kp AT_SIGN           &kp HASH               &kp PIPE           &trans  &trans      &trans     &trans    &trans    &trans
                                         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans             &trans  &trans
            >;
        };

        Navs {
            label = "Navs";
            bindings = <
&trans  &trans    &trans    &trans     &trans      &trans    &trans        &trans    &trans         &trans       &trans     &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHIFT  &trans    &kp CAPSLOCK  &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &trans
&trans  &trans    &trans    &trans     &trans      &trans    &kp INSERT    &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &trans
                            &trans     &trans      &trans    &trans        &trans
            >;
        };

        fun {
            bindings = <
&bootloader  &trans    &trans    &trans     &trans      &trans    &kp PRINTSCREEN  &kp F7      &kp F8  &kp F9  &kp F10  &bootloader
&trans       &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHIFT  &trans    &kp SCROLLLOCK   &kp F4      &kp F5  &kp F6  &kp F11  &trans
&trans       &trans    &trans    &trans     &trans      &trans    &kp PAUSE_BREAK  &kp F1      &kp F2  &kp F3  &kp F12  &trans
                                 &trans     &trans      &trans    &trans           &kp C_MENU
            >;
        };

        media {
            bindings = <
&trans  &trans    &trans    &trans     &trans      &trans    &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2       &bt BT_SEL 3        &bt BT_SEL 4  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHIFT  &trans    &bt BT_CLR    &kp C_VOLUME_UP  &kp C_VOLUME_DOWN  &kp C_MUTE          &kp C_PLAY    &trans
&trans  &trans    &trans    &trans     &trans      &trans    &out OUT_TOG  &kp C_NEXT       &kp C_PREV         &kp C_FAST_FORWARD  &kp C_REWIND  &trans
                            &trans     &trans      &trans    &trans        &trans
            >;
        };

        mouse {
            bindings = <
&trans  &trans  &trans  &trans     &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans
                        &mkp RCLK  &mkp LCLK  &mkp MCLK    &trans  &trans
            >;
        };
    };
};
